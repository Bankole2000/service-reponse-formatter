"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayTimeout = exports.ServiceUnavailable = exports.InternalServerError = exports.TooManyRequests = exports.UnprocessableEntity = exports.ExpectationFailed = exports.UnsupportedMediaType = exports.TimeoutError = exports.MethodNotAllowed = exports.NotFound = exports.Forbidden = exports.Unauthorized = exports.BadRequest = exports.NoContent = exports.Created = exports.OK = exports.ServiceEvent = exports.ServiceResponse = exports.statusMap = exports.StatusType = exports.statuses = exports.Rez = void 0;
const serviceResponses_1 = require("./serviceResponses");
var serviceResponses_2 = require("./serviceResponses");
Object.defineProperty(exports, "Rez", { enumerable: true, get: function () { return serviceResponses_2.Rez; } });
Object.defineProperty(exports, "statuses", { enumerable: true, get: function () { return serviceResponses_2.statuses; } });
Object.defineProperty(exports, "StatusType", { enumerable: true, get: function () { return serviceResponses_2.StatusType; } });
Object.defineProperty(exports, "statusMap", { enumerable: true, get: function () { return serviceResponses_2.statusMap; } });
var ServiceResponse_1 = require("./@types/ServiceResponse");
Object.defineProperty(exports, "ServiceResponse", { enumerable: true, get: function () { return ServiceResponse_1.ServiceResponse; } });
var ServiceEvent_1 = require("./@types/ServiceEvent");
Object.defineProperty(exports, "ServiceEvent", { enumerable: true, get: function () { return ServiceEvent_1.ServiceEvent; } });
const { OK, Created, NoContent, BadRequest, Unauthorized, Forbidden, NotFound, MethodNotAllowed, TimeoutError, UnsupportedMediaType, ExpectationFailed, UnprocessableEntity, TooManyRequests, InternalServerError, ServiceUnavailable, GatewayTimeout } = serviceResponses_1.Rez;
exports.OK = OK;
exports.Created = Created;
exports.NoContent = NoContent;
exports.BadRequest = BadRequest;
exports.Unauthorized = Unauthorized;
exports.Forbidden = Forbidden;
exports.NotFound = NotFound;
exports.MethodNotAllowed = MethodNotAllowed;
exports.TimeoutError = TimeoutError;
exports.UnsupportedMediaType = UnsupportedMediaType;
exports.ExpectationFailed = ExpectationFailed;
exports.UnprocessableEntity = UnprocessableEntity;
exports.TooManyRequests = TooManyRequests;
exports.InternalServerError = InternalServerError;
exports.ServiceUnavailable = ServiceUnavailable;
exports.GatewayTimeout = GatewayTimeout;
